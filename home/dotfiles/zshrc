
# history

HISTFILE=${MY_HISTFILE:-$HOME/.histfile}
HISTSIZE=100000
SAVEHIST=100000
setopt hist_ignore_all_dups
#setopt inc_append_history
setopt append_history
setopt autopushd

# The following lines were added by compinstall
zstyle :compinstall filename "$HOME/.zshrc"

# COMPLETION SETTINGS
# add custom completion scripts

# fix path of man files in NixOS
#if [ -n "$NIX_PROFILES" ]; then
#    manpath=( $^path/../{share/,}man(N:a:-/) )
#    manpath=( ${(u)manpath} )
#    export manpath
#fi

autoload -Uz compinit
compinit
# End of lines added by compinstall

# correction des commandes
setopt correctall

# apparence de l'autocomplétion
zstyle ':completion:*:descriptions' format '%U%B%d%b%u'
zstyle ':completion:*:warnings' format '%BSorry, no matches for: %d%b'
zstyle ':completion:*:sudo:*' command-path /usr/local/sbin /usr/local/bin \
                             /usr/sbin /usr/bin /sbin /bin /usr/X11R6/bin
#complétion avec les fleches
zstyle ':completion:*' menu select=2
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s

# des couleurs pour la complétion
zmodload zsh/complist
setopt extendedglob
alias nix="noglob nix"
zstyle ':completion:*:*:kill:*:processes' list-colors "=(#b) #([0-9]#)*=36=31"

if [ -f ~/.profile ]; then
    . ~/.profile
fi

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

#support des mime (ouvre le bon prog en fonction du type de fichier)
#autoload -U zsh-mime-setup
#autoload -U zsh-mime-handler
#zsh-mime-setup

#fonction interne:
#   * zcalc : une calculatrice (plus besoin de bc ou autres expr)
#   * zargs : un super xargs
#   * zmv : une commande permettant de faire du renommage/déplaçage en masse de fichiers.
#   * zftp : un client ftp natif
autoload -U zfinit
zfinit
autoload -U zcalc
autoload -U zmv
autoload -U zargs

# disable messages by default
#mesg n

#Add hosts from .ssh/known_hosts in auto-completion
#local _myhosts
#_myhosts=( ${${${${(f)"$(<$HOME/.ssh/known_hosts)"}:#[0-9]*}%%\ *}%%,*} )
#zstyle ':completion:*' hosts $_myhosts

# set default std error to red
#exec 2>>(while read line; do
#  print '\e[91m'${(q)line}'\e[0m' > /dev/tty; print -n $'\0'; done &)

# Prompt (adam2) with custom color per host.
case "$(hostname)" in
    klatch*)       host_color=yellow ;;
    sto-lat*)      host_color=magenta ;;
    ankh-morpork*) host_color=cyan ;;
    uberwald*)     host_color=blue ;;
esac
autoload -U promptinit
promptinit
prompt adam2 cyan green $host_color white
setopt prompt_sp # Fixes overriding previous outputs without a newline: https://stackoverflow.com/questions/47061766

unsetopt beep


### key bindings

bindkey "^H" backward-delete-word

# vi mode
bindkey -v # automatic, since $EDITOR is vim
export KEYTIMEOUT=1 # So <esc> acts faster (0.1s).
# update visual indication on mode change
function zle-keymap-select {
    zle reset-prompt
}
zle -N zle-keymap-select

# terminfo bindings
# create a zkbd compatible hash;
# to add other keys to this hash, see: man 5 terminfo
typeset -g -A key

key[Home]="${terminfo[khome]}"
key[End]="${terminfo[kend]}"
key[Insert]="${terminfo[kich1]}"
key[Backspace]="${terminfo[kbs]}"
key[Delete]="${terminfo[kdch1]}"
key[Up]="${terminfo[kcuu1]}"
key[Down]="${terminfo[kcud1]}"
key[Left]="${terminfo[kcub1]}"
key[Right]="${terminfo[kcuf1]}"
key[PageUp]="${terminfo[kpp]}"
key[PageDown]="${terminfo[knp]}"
key[ShiftTab]="${terminfo[kcbt]}"

# setup key accordingly
[[ -n "${key[Home]}"      ]] && bindkey -- "${key[Home]}"      beginning-of-line
[[ -n "${key[End]}"       ]] && bindkey -- "${key[End]}"       end-of-line
[[ -n "${key[Insert]}"    ]] && bindkey -- "${key[Insert]}"    overwrite-mode
[[ -n "${key[Backspace]}" ]] && bindkey -- "${key[Backspace]}" backward-delete-char
[[ -n "${key[Delete]}"    ]] && bindkey -- "${key[Delete]}"    delete-char
#[[ -n "${key[Up]}"        ]] && bindkey -- "${key[Up]}"        up-line-or-history
#[[ -n "${key[Down]}"      ]] && bindkey -- "${key[Down]}"      down-line-or-history
[[ -n "${key[Left]}"      ]] && bindkey -- "${key[Left]}"      backward-char
[[ -n "${key[Right]}"     ]] && bindkey -- "${key[Right]}"     forward-char
[[ -n "${key[PageUp]}"    ]] && bindkey -- "${key[PageUp]}"    beginning-of-buffer-or-history
[[ -n "${key[PageDown]}"  ]] && bindkey -- "${key[PageDown]}"  end-of-buffer-or-history
[[ -n "${key[ShiftTab]}"  ]] && bindkey -- "${key[ShiftTab]}"  reverse-menu-complete

# Finally, make sure the terminal is in application mode, when zle is
# active. Only then are the values from $terminfo valid.
if (( ${+terminfo[smkx]} && ${+terminfo[rmkx]} )); then
    autoload -Uz add-zle-hook-widget
    function zle_application_mode_start {
        echoti smkx
    }
    function zle_application_mode_stop {
        echoti rmkx
    }
    add-zle-hook-widget -Uz zle-line-init zle_application_mode_start
    add-zle-hook-widget -Uz zle-line-finish zle_application_mode_stop
fi

#History search
autoload -Uz up-line-or-beginning-search down-line-or-beginning-search
zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search
[[ -n "${key[Up]}"   ]] && bindkey -- "${key[Up]}"   up-line-or-beginning-search
[[ -n "${key[Down]}" ]] && bindkey -- "${key[Down]}" down-line-or-beginning-search
bindkey          "^R" history-incremental-search-backward
bindkey -M main  "^R" history-incremental-search-backward
bindkey -M vicmd "^R" history-incremental-search-backward


# autocomplete improved for vim and ev(ince)
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion::*:(vi|vim|gvim|gv):*' file-patterns '*~*.(aux|dvi|idx|pdf|rel|png|jpg|asc|raw)' '*'
zstyle ':completion::*:(ev|evince):*' file-patterns '*(.pdf)' '*.(dvi|ps)' '*'
zstyle ':completion::*:(ev|evince):*' file-patterns '*.pdf:pdf-files *(-/):directories *.(dvi|ps):other' '*'
export CORRECT_IGNORE=".vim"
setopt nocorrectall


## automatic rehash on calls to yaourt, pacman , etc...

autoload -U add-zsh-hook
# rehash on SIGUSR1
TRAPUSR1() { rehash };
# anything newly intalled from last command?
precmd_install() { [[ $history[$[ HISTCMD -1 ]] == *(yaourt|pacman|pip|gem|nix-env|nixos-rebuild)* ]] && killall -USR1 zsh || true }
# do this on precmd
add-zsh-hook precmd precmd_install

## Cleanup Path variable.
typeset -U PATH
RPROMPT='%F{green}$(detect_env)%f'

function detect_env () {
    envs=($KEYMAP ${IN_NIX_SHELL+nix} ${VCSH_DIRECTORY+vcsh} ${VIRTUAL_ENV+virtualenv} ${NIX_REMOTE+store});
    [ -z "$VCSH_DIRECTORY" -a -n "$GIT_DIR" ] && envs+=("git")
    local IFS=',' envs="$envs[*]"
    echo "${envs:+"($envs)"}"
}

if [ -z "$SSH_AUTH_SOCK" ]; then
    ## Eval keychain
    eval $(
      setopt nullglob
      keychain --eval --agents ssh -Q --quiet $HOME/.ssh/{id_ecdsa,dark-vador_rsa}
    )
fi

eval "$(direnv hook zsh)"

# vim: set et, sw=4, ts=4
